{
  "id": "70abd0f5-3fb7-4309-a9bf-97afeb28aa9b",
  "tourFile": "projectIntroduction-virtualAssistant.tour",
  "title": "Demo",
  "description": "指南演示",
  "steps": [
    {
      "title": "入门指南",
      "description": "# 入门指南\n\n## 信息\n本导览包含按特定顺序排列的步骤，提供信息、建议、任务和其他资源，帮助新人快速融入项目。\n\n完成所有步骤后，您将对项目有一个初步的理解。\n\n\n## 目的\n本导览旨在指导您以正确顺序接触项目，从而最大化您的上手体验。\n\n请阅读每个步骤的描述，并完成其中提到的相关任务。\n\n\n## 使用方法\n\n对于每个步骤，请：\n- 阅读其描述\n- 理解上下文和目的\n- 完成**任务**​（可使用复选框方便记录，但数据不会保存）\n- 回顾**关键要点**以确保已准备好进入下一步\n\n**注意**：本导览不包含技术细节，仅提供建议步骤和查找信息的指引。\n\n\n## 额外提示\n\n- ​**提示1**：可随时按自己的节奏重复使用本导览，尝试完成所有任务，并记录需要进一步解释的问题或代码片段。\n\n- ​**提示2**：执行相关任务时保持步骤对话框开启。将其置于独立屏幕效果更佳。\n\n- ​**提示3**：可通过右上角*更多*选项按钮（三个圆点）选择**调整字体大小**来修改步骤描述的字体大小。"
    },
    {
      "title": "README文件",
      "description": "# README文件\n\n## 任务\n\n1. [ ] 完整阅读README文件\n2. [ ] 找出项目目标\n3. [ ] 列出技术栈（工具与技术）\n\n\n## 重要性\n请始终从阅读README开始！最多只需5分钟！\n您将获得应用概览（功能定位、技术工具、架构、延伸信息等）。\n无需深入链接或具体细节，但需知晓其中包含的信息索引。\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 应用概览\n- [ ] 内容资源索引"
    },
    {
      "title": "技术栈概览",
      "description": "# 技术栈概览\n\n## 任务\n\n1. [ ] 查找项目依赖（检查**pom.xml**、**build.gradle**、**package.json**、**requirements.txt**等）\n2. [ ] 识别层级结构\n    - 定位持久层（数据库）\n    - 定位API层（Rest、消息、命令行）\n    - 定位业务逻辑层（服务层）\n3. [ ] 快速浏览是否存在以下内容：\n    - DevOps自动化文件（actions、pipelines、jenkinsfiles）\n    - 环境配置文件（dockerfiles、app.properties等）\n\n\n## 重要性\n了解项目依赖有助于理解代码逻辑。\n遇到未知依赖时可通过搜索引擎快速了解（如发现**NgRx**依赖可得知其用于Angular状态管理）。\n\n识别应用层级可帮助理解架构：数据库类型？API类型？业务逻辑位置？安全配置？\n\n环境文件能展示项目部署配置（操作系统、包管理器、框架等），DevOps文件说明自动化流程。\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 项目依赖\n- [ ] 应用层级（数据库/API/服务/安全等）\n- [ ] 环境与DevOps文件"
    },
    {
      "title": "包/组件结构",
      "description": "# 包/组件结构\n\n## 任务\n\n1. [ ] 浏览非源码目录（**src**外的文件夹）\n2. [ ] 探索**src**目录\n3. [ ] 理解分组逻辑（如**packages**、**modules**等）\n\n\n## 重要性\n**探索即阅读文件名**——可能发现命名彩蛋！\n\n先查看**src**外的目录（如资源文件夹含国际化/图片/配置文件），再展开**src**递归浏览所有包（无需打开文件）。\n\n良好的命名策略能直接反映结构逻辑，形成代码索引。\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 文件结构\n- [ ] 命名与分包规范\n- [ ] 资源索引\n- [ ] 资源文件"
    },
    {
      "title": "运行应用",
      "description": "# 运行应用\n\n## 任务\n\n1. [ ] 安装必要外部依赖（如本地数据库）\n2. [ ] 本地运行测试（如可行）\n3. [ ] 查找应用入口点\n4. [ ] 启动应用\n\n\n## 重要性\n此时您已了解项目基础信息，现在需验证环境配置：\n\n- 确保依赖安装正确（如后端项目可能需要本地数据库）\n- 运行测试验证通过率\n- 通过文件名快速定位入口点\n- 运行应用确认状态正常\n\n此步骤可排查环境配置错误、分支错误或代码损坏问题。\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 正确环境配置\n- [ ] 测试通过\n- [ ] 应用入口点\n- [ ] 已验证应用状态"
    },
    {
      "title": "功能探索",
      "description": "# 功能探索\n\n## 任务\n\n1. [ ] 实际操作体验应用\n2. [ ] 对有UI的应用：选择功能并追踪代码执行路径\n3. [ ] 对有功能测试的应用：运行测试并追踪代码路径\n4. [ ] 使用CodeTour记录重要代码路径以便导航\n\n\n## 重要性\n运行应用后需通过实际操作理解功能实现。\n\n建议创建CodeTour文档记录功能执行路径，形成可复用的导航参考。\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 功能概览\n- [ ] 功能与代码路径映射"
    },
    {
      "title": "Git日志分析",
      "description": "# Git日志分析\n\n## 任务\n\n1. [ ] 查看提交历史（作者与频率）\n2. [ ] 识别提交信息规范\n3. [ ] 识别分支策略与命名规范\n4. [ ] 查看2-3个功能提交记录\n5. [ ] 阅读近2-3个月提交信息\n6. [ ] 查看开发中的分支名称\n\n\n## 重要性\n**历史是未来的镜子**：\n\n- 识别主要贡献者与提交频率\n- 了解Git工作流程与规范\n- 通过PR上下文理解功能实现\n- 阅读近期提交掌握最新变更\n- 查看开发中分支了解当前进度\n\n\n## 关键要点\n\n进入下一步前请确认掌握：\n- [ ] 主要贡献者\n- [ ] 提交信息规范\n- [ ] 分支策略\n- [ ] 近期变更\n- [ ] 当前开发中功能"
    },
    {
      "title": "导览完成！下一步？",
      "description": "# 导览完成！下一步？\n\n### 恭喜完成 onboarding 流程！🎉 🎉 🎉\n\n后续建议：\n- [ ] 重播本导览巩固薄弱环节\n- [ ] 整理需协助的问题或代码\n- [ ] 与同事讨论问题\n- [ ] 运行其他深度导览（如有）\n\n**重要**：请分享 onboarding 体验反馈，帮助优化未来新人引导流程！"
    }
  ]
}